import express from 'express';
import * as line from '@line/bot-sdk';
import * as dotenv from 'dotenv';
dotenv.config();

// 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config
const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN, // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
    channelSecret: process.env.CHANNEL_SECRET          // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
};

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡πÅ‡∏•‡∏∞ Express App
const client = new line.Client(config);
const app = express();

// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Webhook
// ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ middleware ‡∏Ç‡∏≠‡∏á line-bot-sdk ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (Signature)
app.post('/webhook', line.middleware(config), (req, res) => {

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ events ‡πÉ‡∏ô body ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!req.body || !req.body.events) {
    return res.status(200).send('OK');
  }

  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å Event ‡∏ó‡∏µ‡πà LINE ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.json(result)) // ‡∏™‡πà‡∏á 200 OK ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    .catch((err) => {
      console.error(err);
      res.status(500).end(); // ‡∏ñ‡πâ‡∏≤ Error ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 500
    });
});

// 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Event
async function handleEvent(event) {
  
  // -----------------------------------------------------------------
  // ----- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Beacon (‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°) -----
  // -----------------------------------------------------------------
  if (event.type === 'beacon') {
    const hwid = event.beacon.hwid;
    const beaconType = event.beacon.type; // 'enter', 'leave', ‡∏´‡∏£‡∏∑‡∏≠ 'banner'

    console.log(`[Beacon Event] HWID: ${hwid}, Type: ${beaconType}`);
    
    let replyText = `‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Beacon! (HWID: ${hwid}, Type: ${beaconType})`;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Beacon
    if (beaconType === 'enter') {
      replyText = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üöÄ';
    } else if (beaconType === 'leave') {
      replyText = '‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞ üëã';
    }

    // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Bot ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: replyText
    });
  }
  // -----------------------------------------------------------------

  // (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ) ‡∏î‡∏±‡∏Å Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  if (event.type === 'message' && event.message.type === 'text') {
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤' // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    });
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
  return Promise.resolve(null);
}

// 5. ‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô Server
const port = process.env.PORT || 4713;
app.listen(port, () => {
  console.log(`Webhook server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port}`);
});